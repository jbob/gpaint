#!/usr/bin/env python
#-*- coding: utf-8 -*-

import gtk
import sys

class MyApp(object):
  # The Pixmap for the image data
  pixmap = None
  gc = None
  lastx = None
  lasty = None


  def __init__(self):
    self.builder = gtk.Builder()
    self.builder.add_from_file("gpaint.glade")
    self.builder.connect_signals(self)
    mw = self.builder.get_object("MainWindow")
    mw.show()

  def run(self):
    try:
      gtk.main()
    except KeyboardInterrupt:
      pass

  def quit(self):
    gtk.main_quit()


  # Drawing functions:
  def draw_brush(self, widget, x, y):
    if(self.lastx == None):
      self.lastx = x
    if(self.lasty == None):
      self.lasty = y
    rect = (int(x), int(y), 1, 1)
    self.pixmap.draw_rectangle(self.gc, True, rect[0], rect[1],
                               rect[2], rect[3])
    if(self.lastx != x or self.lasty != y):
      self.pixmap.draw_line(self.gc, self.lastx, self.lasty, x, y)

    widget.queue_draw_area(0,0,self.width ,self.height)
    self.lastx = x
    self.lasty = y


  # Callback functions:
  def on_window1_delete_event(self, *args):
    self.quit()

  def on_ButtonNew_clicked(self, *args):
    pass

  def on_ButtonOpen_clicked(self, *args):
    open = self.builder.get_object("FileChooser")
    open.set_action(gtk.FILE_CHOOSER_ACTION_OPEN)
    button = self.builder.get_object("FCButtonOK")
    button.set_label("Open")
    open.run()
    filename = open.get_filename()
    open.hide()
    if filename != None:
      pb = gtk.gdk.pixbuf_new_from_file(filename)
      self.pixmap.draw_pixbuf(self.gc, pb, 0, 0, 0, 0, -1, -1)
      da = self.builder.get_object("DrawingArea")
      da.queue_draw_area(0,0,self.width ,self.height)


  def on_ButtonSave_clicked(self, *args):
    save = self.builder.get_object("FileChooser")
    save.set_action(gtk.FILE_CHOOSER_ACTION_SAVE)
    button = self.builder.get_object("FCButtonOK")
    button.set_label("Save")
    save.run()
    filename = save.get_filename()
    save.hide()
    if filename != None:
      pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, has_alpha=False,
                        bits_per_sample=8, width=self.width, height=self.height)
      pb.get_from_drawable(self.pixmap, self.pixmap.get_colormap(),
                         0, 0, 0, 0, -1, -1)
      pb.save(filename,"png")

  def on_ButtonPrint_clicked(self, *args):
    pass

  def on_ButtonUndo_clicked(self, *args):
    pass

  def on_ButtonRedo_clicked(self, *args):
    pass

  def on_ButtonCut_clicked(self, *args):
    pass

  def on_ButtonCopy_clicked(self, *args):
    pass

  def on_ButtonPaste_clicked(self, *args):
    pass

  def on_MenuAbout_activate(self, *args):
    about = self.builder.get_object("DialogAbout")
    about.run()
    about.hide()

  def on_ColorButton_color_set(self, widget):
    c = widget.get_color()
    color = self.gc.get_colormap().alloc_color(c)
    self.gc.set_foreground(color)
    

  def on_DrawingArea_configure_event(self, widget, data):
    x, y, self.width, self.height = widget.get_allocation()
    self.gc = widget.window.new_gc()
    
    self.pixmap = gtk.gdk.Pixmap(widget.window, self.width, self.height)
    self.pixmap.draw_rectangle(widget.get_style().white_gc,
                               True, 0, 0, self.width, self.height)
    return True

  def on_DrawingArea_expose_event(self, widget, data):
    x, y, width, height = data.area
    widget.window.draw_drawable(widget.get_style().fg_gc[gtk.STATE_NORMAL],
                              self.pixmap, x, y, x, y, width, height)
    return False

  def on_DrawingArea_motion_notify_event(self, widget, data):
    if data.is_hint:
      x, y, state = data.window.get_pointer()
    else:
      x = data.x
      y = data.y
      state = data.state

    if state & gtk.gdk.BUTTON1_MASK and self.pixmap != None:
      self.draw_brush(widget, x, y)

    return True

  def on_DrawingArea_button_press_event(self, widget, data):
    if data.button == 1 and self.pixmap != None:
      self.lastx = None
      self.lasty = None
      self.draw_brush(widget, int(data.x), int(data.y))
    return True

if __name__ == '__main__':
    app = MyApp()
    app.run()

